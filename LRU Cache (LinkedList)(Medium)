import java.util.HashMap;            // more efficient solution

public class LRUCache {
    private HashMap<Integer, Node> map;
    private int capacity, count;
    private Node head, tail;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        this.count = 0;
        map = new HashMap<>();
        head = new Node(0, 0);
        tail = new Node(0, 0);
        head.next = tail;
        tail.prev = head;
        head.prev = null;
        tail.next = null;
    }

    public void deleteNode(Node node) {
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }

    public void addToHead(Node node) {
        node.next = head.next;
        node.next.prev = node;
        node.prev = head;
        head.next = node;
    }

    public int get(int key) {
        if (map.get(key) != null) {
            Node node = map.get(key);
            int result = node.value;
            deleteNode(node);
            addToHead(node);
            return result;
        }
        return -1;
    }

    public void put(int key, int value) {
        if (map.get(key) != null) {
            Node node = map.get(key);
            node.value = value;
            deleteNode(node);
            addToHead(node);
        } else {
            Node node = new Node(key, value);
            map.put(key, node);
            if (count < capacity) {
                count++;
                addToHead(node);
            } else {
                map.remove(tail.prev.key);
                deleteNode(tail.prev);
                addToHead(node);
            }
        }
    }
}

class Node {
    int key, value;
    Node prev, next;

    Node(int key, int value) {
        this.key = key;
        this.value = value;
    }
}


class LRUCache {                                  // In efficient solution
    int maxNum;
    LinkedList<Integer> linkedList;
    HashMap<Integer,Integer> hashMap;
    int counter;
    public LRUCache(int capacity) {
        maxNum = capacity;
        linkedList = new LinkedList();
        hashMap = new HashMap();
        counter = 0;
    }

    public int get(int key) {
        if (!hashMap.containsKey(key)) {
            return -1;
        }
        // Move the key to the front to mark as recently used
        linkedList.remove((Integer) key);
        linkedList.addFirst(key);
        return hashMap.get(key);
    }

    public void put(int key, int value) {
        if (hashMap.containsKey(key)) {   // checks if key value is already in the hashmap
            hashMap.put(key, value);
            linkedList.remove((Integer) key);
            linkedList.addFirst(key);
            return;
        }
        // If the cache is full, remove the least recently used item
        if (linkedList.size() == maxNum) {
            int leastUsedKey = linkedList.removeLast();
            hashMap.remove(leastUsedKey);
        }

        // Add the new key-value pair
        linkedList.addFirst(key);
        hashMap.put(key, value);
    }
}

