class Solution {
    public void reorderList(ListNode head) {
        if(head == null || head.next == null){
            return;
        }
        ListNode dummyNode = head;
        ListNode finding_middle = head;

        int counter = 0;
        int solution = 0;

        while(dummyNode.next != null){
            dummyNode=dummyNode.next;
            counter++;
            if((counter / 2) > solution){
                finding_middle = finding_middle.next;
                solution = counter / 2;
            }
        }

        ListNode prev = null;
        ListNode next = null;
        ListNode current = finding_middle.next;                    // 'list2' becomes head of second list split
        finding_middle.next = null;

        while(current != null){
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }

        ListNode dummyHead = head;
        ListNode next2 = null;
        current = prev;

        while(current != null){
            next = dummyHead.next;
            next2 = current.next;
            current.next = dummyHead.next;
            dummyHead.next = current;
            dummyHead = next;
            current = next2;
        }
    }
}


    
class Solution {                                            // CHAT GPT SOLUTION A BIT CLEANER
    public void reorderList(ListNode head) {
        if (head == null || head.next == null) {
            return;
        }

        // Find the middle of the list
        ListNode slow = head, fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        // Reverse the second half of the list
        ListNode prev = null;
        ListNode current = slow;
        while (current != null) {
            ListNode next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }

        // Merge the two halves
        ListNode first = head, second = prev;
        while (second.next != null) {
            ListNode temp1 = first.next;
            ListNode temp2 = second.next;

            first.next = second;
            second.next = temp1;

            first = temp1;
            second = temp2;
        }
    }
}

