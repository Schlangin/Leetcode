class Solution {                                          // Great solution using two List's
    public ListNode partition(ListNode head, int x) {
        ListNode before_head = new ListNode(0);
        ListNode before = before_head;
        ListNode after_head = new ListNode(0);
        ListNode after = after_head;

        while(head != null){
            if(head.val < x){
                before.next = head;
                before = before.next;
            }else{
                after.next = head;
                after = after.next;
            }
            head = head.next;
        }
        after.next = null;
        before.next = after_head.next;

        return before_head.next;
    }
}

class Solution {                                            // CODE IS INCOMPLETE MY FIRST ATTEMPT
    public ListNode partition(ListNode head, int x) {
        if(head == null || head.next == null){
            return head;
        }

        ListNode temp = head;
        ListNode place_holder = null;

        if(head.val < x){
            place_holder = head;
        }
        while(temp != null && temp.next != null){
            ListNode curNode = temp.next;

            if(curNode.val < x){
                if(place_holder == null){
                    temp.next = curNode.next;
                    curNode.next = head;
                    head = curNode;
                    place_holder = head;
                }else{
                    temp.next = curNode.next;
                    curNode.next = place_holder.next;
                    place_holder.next = curNode;
                    place_holder = curNode;
                }
            }
            temp=temp.next;
        }
        return head;
    }
}
class ListNode {
     int val;
      ListNode next;
      ListNode() {

      }
    ListNode(int val) {
          this.val = val;
      }
      ListNode(int val, ListNode next) {
          this.val = val; this.next = next;
      }
  }
