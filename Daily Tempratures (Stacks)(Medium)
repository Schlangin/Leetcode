class Solution {                                              // Best solution using stacks
    public int[] dailyTemperatures(int[] temperatures) {
        int n = temperatures.length;
        int[] result = new int[n];
        Stack<Integer> stack = new Stack<>();

        for (int i = 0; i < n; i++) {
            // Check if the current day's temperature is warmer than the day at the top of the stack
            while (!stack.isEmpty() && temperatures[i] > temperatures[stack.peek()]) {
                int index = stack.pop();
                result[index] = i - index; // Calculate the number of days waited
            }
            stack.push(i); // Push the current day's index onto the stack
        }
        return result;
    }
}



class Solution {                                              // BRUTE FORCE METHOD
    public int[] dailyTemperatures(int[] temperatures) {
        Stack<Integer> stack = new Stack<>();
        ArrayList<Integer> resultList = new ArrayList<>();
        for(int i = 0; i < temperatures.length; i++) {

            int counter = 0;
            boolean found = false;
            int current_input = temperatures[i];

            for (int j = i + 1; j < temperatures.length; j++) {
                counter++;
                if(current_input < temperatures[j]){
                    found = true;
                    break;
                }
            }
            if(found == true){
                resultList.add(counter);
            }else{
                resultList.add(0);
            }
        }

        int[] result = new int[resultList.size()];
        for (int i = 0; i < resultList.size(); i++) {
            result[i] = resultList.get(i);
        }
        return result;
    }
}
