class Solution {
        public boolean isValidSudoku(char[][] board) {
            HashSet<String> seen = new HashSet<>();
            for (int i = 0; i < 9; i++) {
                for (int j = 0; j < 9; j++) {
                    char currentVal = board[i][j];
                    if(currentVal != '.'){                  // if currentValue isnt empty
                        if(!seen.add(currentVal + "found in row" + i)||
                                !seen.add(currentVal + "found in column " + j) ||
                                !seen.add(currentVal + "found in sub box" + i/3 + "-" + j/3)){
                            return false;
                        }
                    }
                }
            }
            return true;
        }
}
                
class Solution {                                                                // MOST EFFECIENT SOLUTION
    public boolean isValidSudoku(char[][] board) {
        for(int i = 0; i<9; i++){
            HashSet<Character> rows = new HashSet<Character>();
            HashSet<Character> columns = new HashSet<Character>();
            HashSet<Character> cube = new HashSet<Character>();
            for (int j = 0; j < 9;j++){
                if(board[i][j]!='.' && !rows.add(board[i][j]))
                    return false;
                if(board[j][i]!='.' && !columns.add(board[j][i]))
                    return false;
                int RowIndex = 3*(i/3);
                int ColIndex = 3*(i%3);
                if(board[RowIndex + j/3][ColIndex + j%3]!='.' && !cube.add(board[RowIndex + j/3][ColIndex + j%3]))
                    return false;
            }
        }
        return true;
    }
}

class Solution {                                                // ALTERNATIVE APPROACH TO SOLVING PROBLEM
    public boolean isValidSudoku(char[][] board) {
        HashSet<String> rows = new HashSet<>();
        HashSet<String> columns = new HashSet<>();
        HashSet<String> boxes = new HashSet<>();

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                char num = board[i][j];
                if (num != '.') {
                    String rowKey = num + " in row " + i;
                    String colKey = num + " in col " + j;
                    String boxKey = num + " in box " + i/3 + "-" + j/3;

                    if (!rows.add(rowKey) || !columns.add(colKey) || !boxes.add(boxKey)) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
}
