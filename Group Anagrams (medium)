class Solution { // this is the inefficient method (mohibs method)
    public List<List<String>> groupAnagrams(String[] strs) {
        List<List<String>> result = new ArrayList<>();
        List<String> anagrams = new ArrayList<>();
        
        for (String str : strs) {
            boolean found = false;
            char[] charArray = str.toCharArray();
            Arrays.sort(charArray);
            String sortedStr = new String(charArray);

            // Search for the sorted string in the list of anagrams
            for (int i = 0; i < anagrams.size(); i++) {
                if (anagrams.get(i).equals(sortedStr)) {
                    result.get(i).add(str);
                    found = true;
                    break;
                }
            }

            // If not found, create a new group
            if (!found) {
                List<String> newGroup = new ArrayList<>();
                newGroup.add(str);
                result.add(newGroup);
                anagrams.add(sortedStr);
            }
        }
        
        return result;
    }
}

class Solution {
    public List<List<String>> groupAnagrams(String[] inputArr) {
        Map<String, List<String>> groupedAnagrams = new HashMap<>();// key(sorted string) value (list of original Strings)

        for(String str: inputArr){ // iterate over the inputArr
            char[] charArr = str.toCharArray(); // turns iteration of inputArr (str in this case) into an array of characters ie "hello" into 'h''e'l'l''o'
            Arrays.sort(charArr); // Sort character array into ASCII order (alphabetical order)
            String sortedStr = String.valueOf(charArr); // Converts the Character Array into a String
            if(!groupedAnagrams.containsKey(sortedStr)){ // check if sorted String already exists in the map or not if not then add an empty array to the map
                groupedAnagrams.put(sortedStr,new ArrayList<>());
            }
            groupedAnagrams.get(sortedStr).add(str); // add the string associated to the sorted string (key) to the map
        }
        return new ArrayList<>(groupedAnagrams.values()); //  converts the grouped anagrams stored in the map into a list of lists
    }
}
