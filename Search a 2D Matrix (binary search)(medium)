class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        for (int i = 0; i < matrix.length; i++) {
            int start = 0;
            int end = matrix[0].length - 1;
            while(start <= end){
                int mid = start + (end - start) / 2;
                if(matrix[i][mid] == target){
                    return true;
                } else if (matrix[i][mid] < target) {
                    start = mid + 1;
                }else{
                    end = mid - 1;
                }
            }
        }
        return false;
    }
}

class Solution {                                                    // CHAT GPT SOLUTION (NOT AS GOOD EFFICIENCY WISE)
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        int n = matrix[0].length;

        // Binary search to find the row
        int rowStart = 0, rowEnd = m - 1;
        while (rowStart <= rowEnd) {
            int rowMid = rowStart + (rowEnd - rowStart) / 2;
            if (matrix[rowMid][0] <= target && matrix[rowMid][n - 1] >= target) {
                // Found the row, now do binary search in this row
                return binarySearchInRow(matrix, rowMid, target);
            } else if (matrix[rowMid][0] > target) {
                rowEnd = rowMid - 1;
            } else {
                rowStart = rowMid + 1;
            }
        }

        return false;
    }

    private boolean binarySearchInRow(int[][] matrix, int row, int target) {
        int start = 0, end = matrix[row].length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (matrix[row][mid] == target) {
                return true;
            } else if (matrix[row][mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return false;
    }
}
