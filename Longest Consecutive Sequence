class Solution {                                                                                        // MY ORIGINAL SOLUTION
    public int longestConsecutive(int[] nums) {
        if(nums.length == 0){
            return 0;
        }
        Arrays.sort(nums);
        int counter = 1;
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Comparator.reverseOrder());
        
        for (int i = 1; i < nums.length; i++) {
            if(nums[i - 1] == nums[i]){ // if there is a duplicate continue
                continue;
            }
            if(nums[i] == nums[i - 1] + 1){ // if this iteration is equal to the previous +1 add
                counter++;
            }else{                          // if not restart the counter and add counter to maxheap
                maxHeap.add(counter);
                counter = 1;
            }
        }
        maxHeap.add(counter);
        return maxHeap.poll();
    }
}

class Solution {                                        // INTERESTING SOLUTION THAT DOESNT REQUIRE A MAXHEAP. I LIKE THIS ONE
    public int longestConsecutive(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }

        Arrays.sort(nums);
        int longestStreak = 1;
        int currentStreak = 1;

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] != nums[i - 1]) { // skip duplicates
                if (nums[i] == nums[i - 1] + 1) {
                    currentStreak++;
                } else {
                    longestStreak = Math.max(longestStreak, currentStreak);
                    currentStreak = 1;
                }
            }
        }

        return Math.max(longestStreak, currentStreak); // check last sequence
    }
}
