class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) {
            return null;
        }

        // Step 1: Create a new node after each original node and interweave them
        Node current = head;
        while (current != null) {
            Node copy = new Node(current.val);
            copy.next = current.next;
            current.next = copy;
            current = copy.next;
        }

        // Step 2: Set the random pointers of the copied nodes
        current = head;
        while (current != null) {
            if (current.random != null) {
                current.next.random = current.random.next;
            }
            current = current.next.next;
        }

        // Step 3: Separate the original list and the copied list
        current = head;
        Node newHead = head.next;
        Node copyCurrent = newHead;
        while (current != null) {
            current.next = current.next.next;
            copyCurrent.next = (copyCurrent.next != null) ? copyCurrent.next.next : null;
            current = current.next;
            copyCurrent = copyCurrent.next;
        }

        return newHead;
    }
}

class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) {
            return null;
        }

        // Creating a mapping from original to copied nodes
        Map<Node, Node> map = new HashMap<>();

        // First pass: copy nodes
        Node originalNode = head;
        while (originalNode != null) {
            map.put(originalNode, new Node(originalNode.val));
            originalNode = originalNode.next;
        }

        // Second pass: assign next and random pointers
        originalNode = head;
        while (originalNode != null) {
            Node copiedNode = map.get(originalNode);
            copiedNode.next = map.get(originalNode.next);
            copiedNode.random = map.get(originalNode.random);
            originalNode = originalNode.next;
        }

        return map.get(head);
    }
}

